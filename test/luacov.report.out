==============================================================================
../src/split.lua
==============================================================================
     --- split: string split function and iterator for Lua
     --
     -- Peter Aronoff
     -- BSD 3-Clause License
     -- 2012-2016
     --
     -- There are many split functions for Lua. This is mine. Though, actually,
     -- I took lots of ideas and probably some code from the implementations on
     -- the Lua-Users Wiki, http://lua-users.org/wiki/SplitJoin.
  99 local find = string.find
  99 local fmt = string.format
  99 local cut = string.sub
  99 local gmatch = string.gmatch
  99 local error = error

     --- Helper functions
     --
     -- Return a table composed of the individual characters from a string.
     local explode = function (str)
  14   local t = {}
  56   for i=1, #str do
  42     t[#t + 1] = cut(str, i, i)
       end

  14   return t
     end

     --- split(string, delimiter) => { results }
     -- Return a table composed of substrings divided by a delimiter or pattern.
     local split = function (str, delimiter)
       -- Handle an edge case concerning the str parameter. Immediately return an
       -- empty table if str == ''.
 252   if str == '' then return {} end

       -- Handle special cases concerning the delimiter parameter.
       -- 1. If the pattern is nil, split on contiguous whitespace.
       -- 2. If the pattern is an empty string, explode the string.
       -- 3. Protect against patterns that match too much. Such patterns would hang
       --    the caller.
 238   delimiter = delimiter or '%s+'
 238   if delimiter == '' then return explode(str) end
 224   if find('', delimiter, 1) then
  28     local msg = fmt('The delimiter (%s) would match the empty string.',
  14                     delimiter)
  14     error(msg)
       end

       -- The table `t` will store the found items. `s` and `e` will keep
       -- track of the start and end of a match for the delimiter. Finally,
       -- `position` tracks where to start grabbing the next match.
 210   local t = {}
       local s, e
 210   local position = 1
 210   s, e = find(str, delimiter, position)

 588   while s do
 378     t[#t + 1] = cut(str, position, s-1)
 378     position = e + 1
 378     s, e = find(str, delimiter, position)
       end

       -- To get the (potential) last item, check if the final position is
       -- still within the string. If it is, grab the rest of the string into
       -- a final element.
 210   if position <= #str then
 168     t[#t + 1] = cut(str, position)
       end

       -- Special handling for a (potential) final trailing delimiter. If the
       -- last found end position is identical to the end of the whole string,
       -- then add a trailing empty field.
 210   if position > #str then
  42     t[#t + 1] = ''
       end

 210   return t
     end

     --- each(str, delimiter)
     local each = function (str, delimiter)
 111   delimiter = delimiter or '%s+'
 111   if delimiter == '' then return gmatch(str, '.') end
  97   if find('', delimiter, 1) then
  28     local msg = fmt('The delimiter (%s) would match the empty string.',
  14                     delimiter)
  14     error(msg)
       end

       local s, e, subsection
  83   local position = 1
       local iter = function ()
 416     if str == '' then return nil end

 402     s, e = find(str, delimiter, position)
 402     if s then
 264       subsection = cut(str, position, s-1)
 264       position = e + 1
 264       return subsection
 138     elseif position <= #str then
  55       subsection = cut(str, position)
  55       position = #str + 2
  55       return subsection
  83     elseif position == #str + 1 then
  14       position = #str + 2
  14       return ''
         end
       end

  83   return iter
     end

  12 local first_and_rest = function(str, delimiter)
  58   delimiter = delimiter or '%s+'
 115   if delimiter == '' then return cut(str, 1, 1), cut(str, 2) end
  51   if find('', delimiter, 1) then
  14     local msg = fmt('The delimiter (%s) would match the empty string.',
  19                     delimiter)
  76     error(msg)
       end

  44   local s, e = find(str, delimiter)
  98   if s then
  29     return cut(str, 1, s - 1), cut(str, e + 1)
       else
  12     return str
       end
     end

  63 local version = function ()
  66   return '2.0.0-1'
     end

  63 local author = function ()
  66   return 'Peter Aronoff'
     end

     local url = function ()
   3   return 'https://bitbucket.org/telemachus/split'
     end

     local license = function ()
   3   return 'BSD 3-Clause'
     end

  24 return {
  24   split = split,
  24   each = each,
  24   spliterator = each,
  24   first_and_rest = first_and_rest,
  24   version = version,
  24   author = author,
  24   url = url,
  24   license = license,
   8 }

==============================================================================
Summary
==============================================================================

File             Hits Missed Coverage
-------------------------------------
../src/split.lua 76   0      100.00%
-------------------------------------
Total            76   0      100.00%
