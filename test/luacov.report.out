
==============================================================================
../src/split.lua
==============================================================================
   	--- split: string split function and iterator for Lua
   	--
   	-- Peter Aronoff
   	-- BSD 3-Clause License
   	-- 2012-2015
   	--
   	-- There are many split functions for Lua. This is mine. Though, actually,
   	-- I took lots of ideas and probably some code from the implementations on
   	-- the Lua-Users Wiki, http://lua-users.org/wiki/SplitJoin.
  7	local find = string.find
  7	local fmt = string.format
  7	local cut = string.sub
  7	local error = error
   	
   	--- Helper functions
   	--
   	-- Return a table composed of the individual characters from a string.
   	local explode = function (str)
  1	  local t = {}
  4	  for i=1, #str do
  3	    t[#t + 1] = cut(str, i, i)
   	  end
   	
  1	  return t
   	end
   	
   	--- split(string, delimiter) => { results }
   	-- Return a table composed of substrings divided by a delimiter or pattern.
   	local split = function (str, delimiter)
   	  -- Handle an edge case concerning the str parameter. Immediately return an
   	  -- empty table if str == ''.
 25	  if str == '' then return {} end
   	
   	  -- Handle special cases concerning the delimiter parameter.
   	  -- 1. If the pattern is nil, split on contiguous whitespace.
   	  -- 2. If the pattern is an empty string, explode the string.
   	  -- 3. Protect against patterns that match too much. Such patterns would hang
   	  --    the caller.
 23	  delimiter = delimiter or '%s+'
 23	  if delimiter == '' then return explode(str) end
 22	  if find('', delimiter, 1) then
  2	    local msg = fmt('The delimiter (%s) would match the empty string.',
  1	                    delimiter)
  1	    error(msg)
   	  end
   	
   	  -- The table `t` will store the found items. `s` and `e` will keep
   	  -- track of the start and end of a match for the delimiter. Finally,
   	  -- `position` tracks where to start grabbing the next match.
 21	  local t = {}
   	  local s, e
 21	  local position = 1
 21	  s, e = find(str, delimiter, position)
   	
 53	  while s do
 32	    t[#t+1] = cut(str, position, s-1)
 32	    position = e + 1
 32	    s, e = find(str, delimiter, position)
   	  end
   	
   	  -- To get the (potential) last item, check if the final position is
   	  -- still within the string. If it is, grab the rest of the string into
   	  -- a final element.
 21	  if position <= #str then
 18	    t[#t + 1] = cut(str, position)
   	  end
   	
   	  -- Special handling for a (potential) final trailing delimiter. If the
   	  -- last found end position is identical to the end of the whole string,
   	  -- then add a trailing empty field.
 21	  if position > #str then
  3	    t[#t+1] = ''
   	  end
   	
 21	  return t
   	end
   	
   	--- spliterator(str, delimiter)
   	local spliterator = function (str, delimiter)
  5	  delimiter = delimiter or '%s+'
  5	  if delimiter == '' then delimiter = '.' end
  5	  if find('', delimiter, 1) then
  2	    local msg = fmt('The delimiter (%s) would match the empty string.',
  1	                    delimiter)
  1	    error(msg)
   	  end
   	
   	  local s, e, subsection
  4	  local position = 1
   	  local function iter()
 19	    if str == '' then return nil end
   	
 18	    s, e = find(str, delimiter, position)
 18	    if s then
 12	      subsection = cut(str, position, s-1)
 12	      position = e + 1
 12	      return subsection
  6	    elseif position <= #str then
  2	      subsection = cut(str, position)
  2	      position = #str + 2
  2	      return subsection
  4	    elseif position == #str + 1 then
  1	      position = #str + 2
  1	      return ''
   	    end
   	  end
   	
  4	  return iter
   	end
   	
  7	return {
  7	  split = split,
  7	  spliterator = spliterator,
  7	  _VERSION = "1.0-0-1",
  7	  _AUTHOR = "Peter Aronoff",
  7	  _URL = "https://bitbucket.org/telemachus/split",
  7	  _LICENSE = 'BSD 3-Clause',
  7	}

==============================================================================
Summary
==============================================================================

56	0	100.00%	../src/split.lua
------------------------
56	0	100.00%	
